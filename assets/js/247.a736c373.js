(window.webpackJsonp=window.webpackJsonp||[]).push([[247],{681:function(v,_,t){"use strict";t.r(_);var s=t(2),a=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("结构化并发（Structured Concurrency）是一种编程模型，旨在简化并发代码的编写和管理，并降低并发编程中的一些常见错误。")]),v._v(" "),_("h2",{attrs:{id:"什么是结构化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是结构化"}},[v._v("#")]),v._v(" 什么是结构化？")]),v._v(" "),_("p",[v._v('"结构化"通常指的是'),_("strong",[v._v("一种编程风格或范例")]),v._v("，其目的是通过使用特定的控制结构和代码组织方式，使得程序的控制流更加清晰、易读、易理解和易维护。结构化编程强调使用顺序、选择和循环这样的基本控制结构，以及避免使用不受欢迎的控制结构，例如无限制的跳转语句（如 GOTO 语句），以减少代码的复杂性和错误的可能性。")]),v._v(" "),_("p",[v._v("结构化编程有以下一些主要特征：")]),v._v(" "),_("ol",[_("li",[v._v("顺序结构：程序按照自上而下的顺序执行，每个语句一次执行一次，没有跳转或分支。")]),v._v(" "),_("li",[v._v("选择结构：使用条件语句（如 if-else、switch）来根据不同条件选择执行不同的代码块。")]),v._v(" "),_("li",[v._v("循环结构：使用循环语句（如 for、while）来重复执行一段代码，直到满足特定的条件。")]),v._v(" "),_("li",[v._v("模块化：将代码划分为更小的、可重用的模块，每个模块负责完成特定的任务，使得代码更加组织化和可维护。")]),v._v(" "),_("li",[v._v("避免 GOTO 语句：避免使用无限制的跳转语句（GOTO），因为它们可能导致代码难以理解和调试。")])]),v._v(" "),_("p",[v._v("结构化编程的目标是提高代码的可读性、可维护性和可测试性，减少错误和缺陷的出现。通过遵循结构化编程原则，程序员可以更容易地理解和修改代码，使代码更加稳健和可靠。")]),v._v(" "),_("p",[v._v("需要注意的是，结构化编程并不是一种具体的编程语言或框架，而是一种编程范式，可以应用于多种编程语言中。在现代编程中，大多数编程语言都支持结构化编程，因此使用结构化编程原则编写代码是一种良好的实践。")]),v._v(" "),_("h2",{attrs:{id:"结构化并发"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#结构化并发"}},[v._v("#")]),v._v(" 结构化并发？")]),v._v(" "),_("p",[v._v("结构化并发通过引入一套规范，使得并发操作在代码中有着明确定义的层次结构，从而使并发代码更易于理解、调试和维护。")]),v._v(" "),_("p",[v._v("在传统的非结构化并发中，开发人员需要手动创建和管理线程或任务，并负责处理并发操作和同步问题。这往往导致代码复杂、容易出错，难以维护。而结构化并发则提供了更高级别的抽象，以简化并发代码的编写和组织。")]),v._v(" "),_("p",[v._v("结构化并发的主要特点包括：")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("异步/等待（async/await）：结构化并发引入了异步/等待模式，允许开发人员使用 async 关键字定义异步函数，其中可以使用 await 关键字等待异步操作的结果。这使得异步代码看起来像是同步代码，更易于阅读和理解。")])]),v._v(" "),_("li",[_("p",[v._v("结构化任务（Task）：结构化并发中的任务（Task）是一个重要的概念，表示一个可以独立执行的代码块。任务可以是异步的，也可以是同步的。任务可以有父任务，从而形成明确的层次结构。")])]),v._v(" "),_("li",[_("p",[v._v("作用域绑定（Scope-Bound）：结构化并发中的任务可以通过作用域绑定来确保在任务范围内的任务和资源的生命周期。这可以帮助避免资源泄漏和明确任务的生命周期。")])]),v._v(" "),_("li",[_("p",[v._v("全局任务（Global Actors）：结构化并发中的全局任务是一种机制，用于保证特定代码块在执行时是独占的，从而避免了并发问题，例如竞态条件。")])]),v._v(" "),_("li",[_("p",[v._v("异步序列（Async Sequences）：结构化并发引入了异步序列，用于处理返回多个值的异步操作。异步序列可以异步地迭代，从而更有效地处理大量数据或流式数据。")])])]),v._v(" "),_("p",[v._v("结构化并发的目标是提供更简单、更安全、更直观的并发编程模型，使得开发人员可以更轻松地编写高效且易于维护的并发代码。在 Swift 编程语言中，引入了结构化并发模型来实现这些功能。")])])}),[],!1,null,null,null);_.default=a.exports}}]);