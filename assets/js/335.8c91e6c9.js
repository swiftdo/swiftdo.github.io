(window.webpackJsonp=window.webpackJsonp||[]).push([[335],{800:function(v,_,l){"use strict";l.r(_);var i=l(2),t=Object(i.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("代码走查（Code Review）是软件开发中的一种重要实践，它旨在通过团队成员间的相互检查，提高代码质量、可维护性和一致性。代码走查的主要目标是发现和解决潜在问题、提升代码质量，确保代码符合项目要求和开发标准。以下是代码走查的主要任务和如何进行：")]),v._v(" "),_("p",[v._v("主要分为 5 部分：")]),v._v(" "),_("p",[v._v("自动处理：")]),v._v(" "),_("ul",[_("li",[v._v("代码规范")]),v._v(" "),_("li",[v._v("测试")])]),v._v(" "),_("p",[v._v("重点关注：")]),v._v(" "),_("ul",[_("li",[v._v("文档")]),v._v(" "),_("li",[v._v("实现")]),v._v(" "),_("li",[v._v("API")])]),v._v(" "),_("h2",{attrs:{id:"自动处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#自动处理"}},[v._v("#")]),v._v(" 自动处理")]),v._v(" "),_("h3",{attrs:{id:"代码规范"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代码规范"}},[v._v("#")]),v._v(" 代码规范")]),v._v(" "),_("ul",[_("li",[v._v("是否应用了项目的格式样式？")]),v._v(" "),_("li",[v._v("它是否遵守商定的命名约定？")]),v._v(" "),_("li",[v._v("是否 DRY? 确保代码结构清晰，避免重复代码。")]),v._v(" "),_("li",[v._v("代码是否足够“可读”（方法长度等）")])]),v._v(" "),_("h3",{attrs:{id:"测试"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[v._v("#")]),v._v(" 测试")]),v._v(" "),_("ul",[_("li",[v._v("所有测试都通过了吗？")]),v._v(" "),_("li",[v._v("新功能是否经过合理测试？")]),v._v(" "),_("li",[v._v("是否测试了极端情况？")]),v._v(" "),_("li",[v._v("是否尽可能使用单元测试，必要时使用集成测试？")]),v._v(" "),_("li",[v._v("是否有针对 NFR 的测试，例如性能？")])]),v._v(" "),_("h2",{attrs:{id:"重点关注"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重点关注"}},[v._v("#")]),v._v(" 重点关注")]),v._v(" "),_("h3",{attrs:{id:"文档"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#文档"}},[v._v("#")]),v._v(" 文档")]),v._v(" "),_("ul",[_("li",[v._v("新功能是否有合理的说明？")]),v._v(" "),_("li",[v._v("是否涵盖所有相关类型的文档，例如自述文件、API 文档、用户指南、参考文档等？")]),v._v(" "),_("li",[v._v("文档是否易于理解并且没有明显的拼写错误和语法错误？")])]),v._v(" "),_("h3",{attrs:{id:"实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[v._v("#")]),v._v(" 实现")]),v._v(" "),_("ul",[_("li",[v._v("是否满足原来的要求？")]),v._v(" "),_("li",[v._v("逻辑上正确吗？")]),v._v(" "),_("li",[v._v("没有不必要的复杂性吗？")]),v._v(" "),_("li",[v._v("它是否健壮（即没有并发问题、正确的错误处理等）？")]),v._v(" "),_("li",[v._v("性能好吗？")]),v._v(" "),_("li",[v._v("它安全吗（即没有 SQL 注入等）？")]),v._v(" "),_("li",[v._v("它是否可观察（即指标、日志记录、跟踪等）？")]),v._v(" "),_("li",[v._v("新添加的依赖项是否发挥作用？他们的许可证可以接受吗？")])]),v._v(" "),_("h3",{attrs:{id:"api"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[v._v("#")]),v._v(" API")]),v._v(" "),_("ul",[_("li",[v._v("API 越小越好，需要多大就多大？")]),v._v(" "),_("li",[v._v("是否有一种方法可以做一件事，而不是多种方法？")]),v._v(" "),_("li",[v._v("是否一致，是否遵循最小意外原则？")]),v._v(" "),_("li",[v._v("API/内部结构的干净分割，没有内部结构泄漏到 API 中？")]),v._v(" "),_("li",[v._v("面向用户的部分（API 类、配置、指标、日志格式等）是否没有重大变化?")]),v._v(" "),_("li",[v._v("新的 API 是否普遍有用且不会过于特定于单个用例？")])]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"主要任务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#主要任务"}},[v._v("#")]),v._v(" 主要任务")]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("代码质量检查")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("检查代码的清晰性、简洁性和可读性。")]),v._v(" "),_("li",[v._v("确保命名规范一致，变量、函数和类名符合项目的命名标准。")]),v._v(" "),_("li",[v._v("确保代码结构清晰，避免重复代码，尽量符合DRY（Don't Repeat Yourself）原则。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("功能正确性")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("确保代码实现了预期的功能，并且没有逻辑错误。")]),v._v(" "),_("li",[v._v("测试代码是否通过现有的单元测试，是否覆盖了所有关键的功能点。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("性能考虑")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("检查代码是否有性能瓶颈，如不必要的循环、重复计算或过度的资源消耗。")]),v._v(" "),_("li",[v._v("检查数据结构和算法的选择，确保在合理范围内优化性能。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("错误处理")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("确保所有可能的异常和错误都有适当的处理。")]),v._v(" "),_("li",[v._v("检查代码是否处理了所有的边界情况和异常情况，避免未处理的错误。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("安全性")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("检查是否有安全漏洞，如SQL注入、XSS等。")]),v._v(" "),_("li",[v._v("确保敏感数据（如密码、API密钥）得到妥善保护。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("可维护性与扩展性")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("代码是否容易理解，是否易于修改和扩展。")]),v._v(" "),_("li",[v._v("是否遵循了设计模式和架构原则，使得代码在未来能够适应更改。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("依赖管理")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("确保没有不必要的外部依赖，减少不必要的库引用。")]),v._v(" "),_("li",[v._v("检查是否有过时或已废弃的依赖。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("文档与注释")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("确保函数、类和复杂逻辑部分有清晰的注释，说明代码的意图和功能。")]),v._v(" "),_("li",[v._v("确保文档更新与代码变更同步。")])])])]),v._v(" "),_("h2",{attrs:{id:"如何进行代码走查"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何进行代码走查"}},[v._v("#")]),v._v(" 如何进行代码走查")]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("准备阶段")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("提交者准备好代码，标明需要检查的部分和关注点。")]),v._v(" "),_("li",[v._v("确保代码已经通过基本的单元测试，并且没有重大 bug。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("分配任务")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("确定谁来进行代码走查。通常选择有经验的开发人员或对该模块有一定了解的人。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("代码审查")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("审查人员逐行检查代码，提出建议或指出问题。")]),v._v(" "),_("li",[v._v("确保提出的反馈是具体的、可操作的，而不是仅仅提出问题。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("讨论与修改")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("对代码审查中发现的问题进行讨论，确保提出的修改方案可行。")]),v._v(" "),_("li",[v._v("提交者根据审查反馈修改代码。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("验证与确认")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("经过修改后，再次进行验证，确保修改解决了问题且没有引入新问题。")]),v._v(" "),_("li",[v._v("审查人员确认代码的修改符合要求，并进行最终批准。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("文档和总结")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("记录审查过程中的主要问题和讨论的改进措施。")]),v._v(" "),_("li",[v._v("可以根据审查结果对团队的开发规范进行总结和改进。")])])])]),v._v(" "),_("p",[v._v("代码走查不仅有助于提高代码质量，还能促进团队成员之间的知识共享和沟通。")])])}),[],!1,null,null,null);_.default=t.exports}}]);