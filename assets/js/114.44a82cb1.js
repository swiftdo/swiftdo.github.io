(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{795:function(a,t,s){"use strict";s.r(t);var l=s(8),c=Object(l.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("Haskell 项目中，经常用到包管理工具：")]),a._v(" "),s("ul",[s("li",[a._v("cabal")]),a._v(" "),s("li",[a._v("stack")]),a._v(" "),s("li",[a._v("nix")])]),a._v(" "),s("p",[a._v("这里对这三个工具做个简要的说明。")]),a._v(" "),s("h2",{attrs:{id:"cabal库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cabal库"}},[a._v("#")]),a._v(" cabal库")]),a._v(" "),s("p",[a._v("是一个 haskell 包集合的库，提供了不同的包以及不同的版本。cabal-install 和 stack 均是前端基于 cabal 库使用的工具。")]),a._v(" "),s("h2",{attrs:{id:"cabal-install"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cabal-install"}},[a._v("#")]),a._v(" cabal-install")]),a._v(" "),s("p",[a._v("最早用的工具，用于 haskell 包的管理。提供了规范文件，来构建包，同时也提供了工具来进行包的下载安装cabal-install。")]),a._v(" "),s("h2",{attrs:{id:"stack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[a._v("#")]),a._v(" stack")]),a._v(" "),s("p",[a._v("stack 是一个可以替代 cabal 的工具，提供了更加便利的包管理，对于包的依赖，不同的版本，均提供了很好的支持。同时 stack 也支持不同的 ghc 发行版本管理。可以将不同的 ghc 发行版本来进行本地安装，通过配置文件，来进行选择。")]),a._v(" "),s("p",[a._v("stack 通过提供沙盒机制，来进行隔离，从而使得不同版本应用之间不会冲突。")]),a._v(" "),s("h2",{attrs:{id:"nix"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nix"}},[a._v("#")]),a._v(" nix")]),a._v(" "),s("p",[a._v("nix 其实像 stack，都是提供项目代码的包依赖，将这些依赖的包编译并且运行。但是 stack 要求依赖的包都是 Haskell 包，而 nix 是一个更加通用的包管理工具，可以是任何的包。它提供了一个库管理的通用方法，每一个库不同的版本，均有一个唯一的标识，这样可以做多个包多个版本的管理。")])])}),[],!1,null,null,null);t.default=c.exports}}]);