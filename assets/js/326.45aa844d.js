(window.webpackJsonp=window.webpackJsonp||[]).push([[326],{790:function(a,e,t){"use strict";t.r(e);var s=t(2),r=Object(s.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[a._v("可能你有过以下的经历：")]),a._v(" "),e("ul",[e("li",[a._v("没有添加很好的忽略文件 (.gitignore)，有个不该上传的东西被我上传上去了！后面删除，但是还是可以从历史中，于是便修改了源代码，但是在 History 中还是能看到以前的提交记录！(如果是一些敏感信息的话，那就 GG 了)")]),a._v(" "),e("li",[a._v("很久之前在工程里加了个很大的第三方静态库且入库了。但是后面的某一天改用Pod (依赖管理工具) 管理，删除了这个第三方静态库，但是仓库的空间并没有减少。")])]),a._v(" "),e("p",[a._v("怎么解决上面的问题，可以从项目中彻底移除？")]),a._v(" "),e("p",[e("strong",[e("a",{attrs:{href:"https://rtyley.github.io/bfg-repo-cleaner/",target:"_blank",rel:"nofollow noopener noreferrer"}},[a._v("BFG-Repo-Cleaner"),e("OutboundLink")],1)]),a._v(" 闪亮登场！清除大文件，文件夹，隐私文件的神器")]),a._v(" "),e("h2",{attrs:{id:"安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[a._v("#")]),a._v(" 安装")]),a._v(" "),e("p",[a._v("使用 Homebrew，可以使用如下命令安装 BFG：")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[a._v("brew "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" bfg\n")])])]),e("h2",{attrs:{id:"删除文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除文件"}},[a._v("#")]),a._v(" 删除文件")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[a._v("bfg --delete-files RobotArm.sdf RobotArm.git\n")])])]),e("p",[a._v("这种情况 BFG 会保护当前版本(HEAD 所指的版本)，不去清理。但如果这个版本也有需要删除的文件，那么可以这么使用，解除保护")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[a._v("bfg --delete-files RobotArm.sdf --no-blob-protection\n")])])]),e("h2",{attrs:{id:"删除文件夹"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除文件夹"}},[a._v("#")]),a._v(" 删除文件夹")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[a._v("bfg --delete-folders _Boot\n")])])]),e("p",[a._v("跟删除文件一样，如果需要接触当前版本的保护。")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[a._v("bfg --delete-folders _Boot RobotArm.git --no-blob-protection\n")])])]),e("h2",{attrs:{id:"清理不需要的数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清理不需要的数据"}},[a._v("#")]),a._v(" 清理不需要的数据")]),a._v(" "),e("p",[a._v("完成上面的指令后，实际上这些原文件并没有被删除，只是删除了 "),e("code",[a._v(".git")]),a._v(" 中的所有记录，还需要运行 "),e("code",[a._v("git gc")]),a._v(" 来清除。")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" reflog expire "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--expire")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("now "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--all")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" gc "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--prune")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("now "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--aggressive")]),a._v("\n")])])]),e("h2",{attrs:{id:"推送到远端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#推送到远端"}},[a._v("#")]),a._v(" 推送到远端")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" push "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-u")]),a._v(" origin master "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--force")]),a._v("\n")])])]),e("p",[a._v("在多人协作项目中，如果代码风格统一、代码提交信息的说明准确，那么在后期协作以及 Bug 处理时会更加方便。")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("Feat")]),a._v("：    新功能（feature）")]),a._v(" "),e("li",[e("code",[a._v("Fix")]),a._v("：     修补bug")]),a._v(" "),e("li",[e("code",[a._v("Docs")]),a._v("：    文档（documentation）")]),a._v(" "),e("li",[e("code",[a._v("Style")]),a._v("：   格式（不影响代码运行的变动）")]),a._v(" "),e("li",[e("code",[a._v("Refactor")]),a._v("：重构（即不是新增功能，也不是修改bug的代码变动）")]),a._v(" "),e("li",[e("code",[a._v("Test")]),a._v("：    增加测试")]),a._v(" "),e("li",[e("code",[a._v("Chore")]),a._v("：   构建过程或辅助工具的变动")])]),a._v(" "),e("p",[a._v("如果 type 为 Feat 和 Fix，则该 commit 将肯定出现在 Change log 之中。")]),a._v(" "),e("blockquote",[e("p",[a._v("参考："),e("a",{attrs:{href:"https://blog.csdn.net/y491887095/article/details/80594043",target:"_blank",rel:"nofollow noopener noreferrer"}},[a._v("git commit 提交规范 & 规范校验"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);