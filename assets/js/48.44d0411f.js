(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{512:function(t,a,s){"use strict";s.r(a);var n=s(2),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("冒泡排序就是重复“从序列右边开始比较相邻两个数字的大小，再根据结果交换两个数字 的位置”这一操作的算法。在这个过程中，数字会像泡泡一样，慢慢从右往左“浮”到序列的 顶端，所以这个算法才被称为“冒泡排序”。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"20161009190728886","data-src":"/imgs/20161009190728886.gif",loading:"lazy"}})]),t._v(" "),a("h2",{attrs:{id:"步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[t._v("#")]),t._v(" 步骤")]),t._v(" "),a("ol",[a("li",[t._v("比较相邻的元素。如果第一个比第二个大，就交换他们两个。")]),t._v(" "),a("li",[t._v("对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。")]),t._v(" "),a("li",[t._v("针对所有的元素重复以上的步骤，除了最后一个。")]),t._v(" "),a("li",[t._v("持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。")])]),t._v(" "),a("h2",{attrs:{id:"举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例"}},[t._v("#")]),t._v(" 举例")]),t._v(" "),a("p",[t._v("1.对数字 1~9 进行排序\n"),a("img",{staticClass:"lazy",attrs:{alt:"-w556","data-src":"/imgs/2020-08-13-15973299080013.png",loading:"lazy"}})]),t._v(" "),a("p",[t._v("2.在序列的最右边放置一个天平，比较天平两边的数字。如果右边的数字较小，就交换这两个数字的位置。\n"),a("img",{staticClass:"lazy",attrs:{alt:"-w521","data-src":"/imgs/2020-08-13-15973299739169.png",loading:"lazy"}})]),t._v(" "),a("p",[t._v("3.由于 6 < 7，所以交换这两个数字。\n"),a("img",{staticClass:"lazy",attrs:{alt:"-w313","data-src":"/imgs/2020-08-13-15973300049311.png",loading:"lazy"}})]),t._v(" "),a("p",[t._v("4.完成后，天平往左移动一个位置，比较两个数 字的大小。此处 4 < 6，所以无须交换。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"-w300","data-src":"/imgs/2020-08-13-15973300294232.png",loading:"lazy"}})]),t._v(" "),a("p",[t._v("5.继续将天平往左移动一个位置并比较数字。重复同样的操作直到天平到达序列最左边为止。\n"),a("img",{staticClass:"lazy",attrs:{alt:"-w539","data-src":"/imgs/2020-08-13-15973300616706.png",loading:"lazy"}})]),t._v(" "),a("p",[t._v("6.不断对数字进行交换，天平最终到达了最左边。通过这一系列操作，序列中最小的数字就会移动到最左边。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"-w551","data-src":"/imgs/2020-08-13-15973301035635.png",loading:"lazy"}})]),t._v(" "),a("p",[t._v("7.最左边的数字已经归位。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"-w500","data-src":"/imgs/2020-08-13-15973301409192.png",loading:"lazy"}})]),t._v(" "),a("p",[t._v("8.将天平移回最右边，然后重复之前的操作，直到天平到达左边第 2 个位置为止。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"-w495","data-src":"/imgs/2020-08-13-15973301718336.png",loading:"lazy"}})]),t._v(" "),a("p",[t._v("9.当天平到达左边第 2 个位置时，序列中第 2 小的数字也就到达了指定位置。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"-w484","data-src":"/imgs/2020-08-13-15973302119128.png",loading:"lazy"}})]),t._v(" "),a("p",[t._v("10.将天平再次移回最右边，重复同样的操作直到所有数字都归位为止。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"-w476","data-src":"/imgs/2020-08-13-15973302447126.png",loading:"lazy"}})]),t._v(" "),a("p",[t._v("11.由于 9 > 6，所以交换这两个数字。")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"-w308","data-src":"/imgs/2020-08-13-15973302742671.png",loading:"lazy"}})]),t._v(" "),a("p",[t._v("12.由于 9 > 8，所以交换这两个数字。\n"),a("img",{staticClass:"lazy",attrs:{alt:"-w308","data-src":"/imgs/2020-08-13-15973303008769.png",loading:"lazy"}})]),t._v(" "),a("p",[t._v("13.排序完成\n"),a("img",{staticClass:"lazy",attrs:{alt:"-w492","data-src":"/imgs/2020-08-13-15973303294906.png",loading:"lazy"}})]),t._v(" "),a("h2",{attrs:{id:"代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("bubleSort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token omit keyword"}},[t._v("_")]),t._v(" numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nums "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" numbers\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("..<")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("..<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swapAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nums\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nums "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("34")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bubleSort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[t._v("#")]),t._v(" 性能")]),t._v(" "),a("p",[t._v("在冒泡排序中，第 1 轮需要比较 n-1 次，第 2 轮需要比较 n-2 次......第 n-1 轮需要比较 1 次。因此，总的比较次数为 (n - 1) + (n - 2) + ... + 1 ≈ n^2/2。这个比较次数恒定为该数值，和输入数据的排列顺序无关。")]),t._v(" "),a("p",[t._v("不过，交换数字的次数和输入数据的排列顺序有关。假设出现某种极端情况，如输入数据正好以从小到大的顺序排列，那么便不需要任何交换操作;反过来，输入数据要是以从大到小的顺序排列，那么每次比较数字后便都要进行交换。因此，冒泡排序的时 间复杂度为 O(n^2)。")])])}),[],!1,null,null,null);a.default=r.exports}}]);