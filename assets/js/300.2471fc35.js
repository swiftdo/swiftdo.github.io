(window.webpackJsonp=window.webpackJsonp||[]).push([[300],{763:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("容器间是彼此完全隔离的，但是我们期望的是隔离容器组，而不是单个容器，并让每个容器组内的容器共享一些资源，而不是全部(未完全隔离)。")]),t._v(" "),a("p",[t._v("K8s 通过配置 Docker 来让一个pod 内的所有容器共享相同的Linux命名空间，而不是每个容器都有自己的一组命名空间。由于一个pod所有的容器都在相同的network和UTS命名空间下运行，所以他们都共享相同的主机名和网络接口。")]),t._v(" "),a("p",[t._v("每个容器的文件系统与其他容器完全隔离。")]),t._v(" "),a("p",[t._v("在 Kubernetes 中，Pod 是最小的部署单位。它是运行一个或多个容器的抽象层，通常情况下每个 Pod 只运行一个容器，但也可以运行多个容器，它们共享网络和存储资源。")]),t._v(" "),a("p",[t._v("主要特点：")]),t._v(" "),a("ul",[a("li",[t._v("单个容器：大多数 Pod 通常包含一个容器，Kubernetes 会自动管理容器的启动、停止和重启。")]),t._v(" "),a("li",[t._v("多容器场景：某些场景下，Pod 可以包含多个紧密协作的容器，这些容器共享同一个网络环境（即相同的 IP 地址和端口空间），并通过本地存储进行通信。")]),t._v(" "),a("li",[t._v("共享存储和网络：Pod 内的所有容器共享相同的存储卷、网络接口和 IP 地址，但它们之间仍然是隔离的进程。")]),t._v(" "),a("li",[t._v("生命周期：Pod 的生命周期是短暂的，当 Pod 被销毁后，不能恢复，因此 Kubernetes 会创建新的 Pod 来替换它们。")])]),t._v(" "),a("p",[t._v("Pod 是 Kubernetes 中部署和管理容器的基本单位，尽管容器是核心组件，但 Kubernetes 不直接管理容器，而是通过管理 Pod 来完成容器的编排。")]),t._v(" "),a("p",[t._v("决定何时再pod中使用两个容器：")]),t._v(" "),a("ul",[a("li",[t._v("他们需要一起运行还是可以在不同的主机上运行？")]),t._v(" "),a("li",[t._v("他们代表的是一个整体还是互相独立的组件？")]),t._v(" "),a("li",[t._v("它们必须一起进行扩容还是可以分别进行？")])]),t._v(" "),a("h2",{attrs:{id:"以yaml描述文件创建pod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#以yaml描述文件创建pod"}},[t._v("#")]),t._v(" 以yaml描述文件创建pod")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Pod\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("pod  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Pod 的名称")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("app")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("app  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 标签，用于标识和选择 Pod")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("container  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 容器名称")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 容器使用的镜像")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containerPort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 容器暴露的端口")]),t._v("\n")])])]),a("p",[t._v("解释：")]),t._v(" "),a("ul",[a("li",[t._v("apiVersion: 指定 Kubernetes API 的版本，Pod 通常使用 v1。")]),t._v(" "),a("li",[t._v("kind: 资源的类型，这里是 Pod")]),t._v(" "),a("li",[t._v("metadata: 包含 Pod 的元数据，如 name（Pod 名称）和 labels（用于标识 Pod 的标签）。")]),t._v(" "),a("li",[t._v("spec: 描述 Pod 的详细配置，包括它运行的容器。\n"),a("ul",[a("li",[t._v("containers: Pod 中容器的列表。")]),t._v(" "),a("li",[t._v("name: 容器的名称。")]),t._v(" "),a("li",[t._v("image: 容器使用的镜像，这里是 nginx 镜像。")]),t._v(" "),a("li",[t._v("ports: 容器暴露的端口，在此例中，容器暴露的是 80 端口。")])])])]),t._v(" "),a("p",[t._v("这是一个最基础的 Pod 配置文件，你可以根据需求进一步扩展，比如添加环境变量、挂载存储卷、设置资源限制等。")]),t._v(" "),a("p",[t._v("几乎在所有Kubernetes资源中都可以找到的三大重要部分：")]),t._v(" "),a("ul",[a("li",[t._v("metadata 包括名称、命名空间、标签和关于该容器的其他信息。")]),t._v(" "),a("li",[t._v("spec 包含pod内容的实际说明，例如pod的容器、卷和其他数据。")]),t._v(" "),a("li",[t._v("status 包含运行中的pod的当前信息，例如pod所处的条件、每个容器的描述和状态，以及内部IP和其他基本信息")])]),t._v(" "),a("p",[t._v("然后通过"),a("code",[t._v("kubectl create")]),t._v(" 命令从yaml 文件创建pod:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("$ kubectl create "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("f kubia"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("manual.yaml\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);