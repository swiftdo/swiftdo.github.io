(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{615:function(t,e,s){"use strict";s.r(e);var a=s(2),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"poetry-是什麼"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#poetry-是什麼"}},[t._v("#")]),t._v(" Poetry 是什麼？")]),t._v(" "),e("p",[t._v("Poetry 是一个 Python 打包和依赖管理工具，旨在简化 Python 包的创建、发布和依赖管理。与传统的 setuptools、pip 和 requirements.txt 的组合相比，Poetry 提供了一个统一和简化的工具和工作流程。")]),t._v(" "),e("p",[t._v("主要特点：")]),t._v(" "),e("ol",[e("li",[t._v("声明式的依赖管理: 通过 pyproject.toml 文件，你可以明确地指定项目的依赖和版本。")]),t._v(" "),e("li",[t._v("自动生成 lock 文件: 类似于 JavaScript 的 yarn 或 Ruby 的 Bundler，poetry 会生成一个 poetry.lock 文件，确保在所有环境中的依赖都是确定和一致的。")]),t._v(" "),e("li",[t._v("虚拟环境管理: 默认情况下，poetry 为每个项目自动创建和管理一个虚拟环境。")]),t._v(" "),e("li",[t._v("包构建和发布: 使用单个工具，你可以构建和发布你的包到 PyPI。")]),t._v(" "),e("li",[t._v("完整的依赖解析: poetry 有一个强大的依赖解析算法，确保项目的所有依赖都是相容的，且没有版本冲突。")]),t._v(" "),e("li",[t._v("管理 Python 版本: 你可以在 pyproject.toml 文件中指定 Python 的版本，确保所有开发者和环境使用同样版本的 Python。")])]),t._v(" "),e("h2",{attrs:{id:"名词解释-虚拟环境管理、模块管理、模块依赖管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#名词解释-虚拟环境管理、模块管理、模块依赖管理"}},[t._v("#")]),t._v(" 名词解释：虚拟环境管理、模块管理、模块依赖管理")]),t._v(" "),e("h3",{attrs:{id:"虚拟环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟环境"}},[t._v("#")]),t._v(" 虚拟环境")]),t._v(" "),e("p",[t._v("虚拟环境是指内建的 venv 或 virtualenv 、 conda 以及其他用来创建与管理 Python 虚拟环境的工具，不同的虚拟环境各自独立，存放的位置、安装的模块也都不一样。")]),t._v(" "),e("h3",{attrs:{id:"模块管理、模块依赖管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模块管理、模块依赖管理"}},[t._v("#")]),t._v(" 模块管理、模块依赖管理")]),t._v(" "),e("p",[e("strong",[t._v("模块")]),t._v("是指虚拟环境中安装的第三方模块及其版本。大多数项目对第三方库的版本都是有特定要求，如果对旧版本的项目使用新版本的依赖，可能会报很奇怪的错误。")]),t._v(" "),e("p",[t._v("当安装第三方模块时，第三方模块可能会安装自己依赖的模块。当安装两个以上模块时，就可能出现第三方模块的依赖出现冲突。这种情况一般是依赖的版本冲突。这种就叫做"),e("strong",[t._v("相关性依赖")])]),t._v(" "),e("h2",{attrs:{id:"pip-的不足"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pip-的不足"}},[t._v("#")]),t._v(" pip 的不足")]),t._v(" "),e("p",[t._v("pip 是 python 内置的依赖管理工具，而它最大的不足在于 第三方模块的相关性依赖管理 的能力不足。尤其是在删除第三方模块是的依赖解析， 可以说是不会分析依赖。")]),t._v(" "),e("p",[t._v("案例：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("创建虚拟环境")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ python3 "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" venv venv\n$ venv/bin/activate\n")])])])]),t._v(" "),e("li",[e("p",[t._v("安装 flask 并查看安装好的第三方模块（依赖）")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ pip "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" flask\n$ pip list \nPackage      Version\n------------ -------\nblinker      "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.6")]),t._v(".2\nclick        "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.1")]),t._v(".3\ncolorama     "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.4")]),t._v(".6\nFlask        "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.3")]),t._v(".2\nitsdangerous "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.1")]),t._v(".2\nJinja2       "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1")]),t._v(".2\nMarkupSafe   "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.1")]),t._v(".2\npip          "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("22.3")]),t._v(".1\nsetuptools   "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("65.5")]),t._v(".0\nWerkzeug     "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.3")]),t._v(".6\n")])])])]),t._v(" "),e("li",[e("p",[t._v("然后删除 flask 模块")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ pip uninstall flask\n$ pip list \nPackage      Version\n------------ -------\nblinker      "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.6")]),t._v(".2\nclick        "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8.1")]),t._v(".3\ncolorama     "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.4")]),t._v(".6\nitsdangerous "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.1")]),t._v(".2\nJinja2       "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1")]),t._v(".2\nMarkupSafe   "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.1")]),t._v(".2\npip          "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("22.3")]),t._v(".1\nsetuptools   "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("65.5")]),t._v(".0\nWerkzeug     "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.3")]),t._v(".6\n")])])]),e("p",[t._v("然后就会发现，只少了 flask 模块，而安装 flask 时顺带安装的依赖全部被留下了。也就是说 pip 安装模块是，相关的依赖都会被下载安装。但是在删除是，pip 就不会进行管理了，而是直接把指定的模块移除，留下一堆依赖。")])])]),t._v(" "),e("p",[t._v("还有一种情况就是，pip 手动移除依赖模块的潜在风险。flask 依赖了 click，他是一个协助制作命令行界面的工具。假设我们又要安装 black, 它是一个可以透过 cli 指令纸吸管格式化的工具，刚好也使用了 click 来做命令行功能。如果你移除 flask 时，同时把click 也跟着一并手动移除，那么 black 就会出问题————因为缺少click模块。")]),t._v(" "),e("p",[t._v("总而言之，直接 pip 手动移除模块存在下列两大疑虑，不建议轻易尝试：")]),t._v(" "),e("ol",[e("li",[t._v("不确定想移除的模块")]),t._v(" "),e("li",[t._v("及时确定模块，也无法确定这些模块是否还被其他模块所依赖")])]),t._v(" "),e("h2",{attrs:{id:"pipenv-vs-poetry"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pipenv-vs-poetry"}},[t._v("#")]),t._v(" pipenv vs poetry")]),t._v(" "),e("p",[t._v("因为 pip 存在这样的致命落点，所以很早就有相关的方案提出想要解決它，最知名的莫过于 Pipenv！")]),t._v(" "),e("p",[e("strong",[t._v("Pipenv")]),t._v(":")]),t._v(" "),e("ol",[e("li",[t._v("基于 Pip 和 Virtualenv: Pipenv 是构建在 Pip 和 Virtualenv 之上的工具，它利用了这两个 Python 社区中已经广泛使用的工具。")]),t._v(" "),e("li",[t._v("Pipfile 和 Pipfile.lock: Pipenv 使用 Pipfile 和 Pipfile.lock 作为项目的配置文件，用于定义项目的依赖关系和锁定依赖的版本。这些文件与 Pipenv 密切相关，并且与传统的 requirements.txt 文件相比提供了更加清晰和易于维护的方式来管理依赖。")]),t._v(" "),e("li",[t._v("虚拟环境管理: Pipenv 自动管理项目的虚拟环境，确保每个项目都有自己的环境，并且可以防止依赖冲突。")]),t._v(" "),e("li",[t._v("命令行接口: Pipenv 提供了一组命令行工具，用于安装依赖、管理虚拟环境、运行项目等。")])]),t._v(" "),e("p",[e("strong",[t._v("Poetry")]),t._v(":")]),t._v(" "),e("ol",[e("li",[t._v("独立工具: Poetry 是一个独立的工具，它旨在提供更全面的 Python 项目管理解决方案。")]),t._v(" "),e("li",[t._v("pyproject.toml: Poetry 使用 pyproject.toml 文件作为项目的配置文件，这是 PEP 517 和 PEP 518 的一部分，旨在提供一种现代和标准化的项目配置方式。")]),t._v(" "),e("li",[t._v("依赖管理和打包: Poetry 不仅仅用于管理项目的依赖关系，还可以用于构建和发布项目，使得整个项目的生命周期更加完整。")]),t._v(" "),e("li",[t._v("内置的打包和发布功能: Poetry 提供了一种简单的方式来打包和发布项目，用户可以使用 Poetry 命令构建和发布项目到 PyPI 或其他包管理器。")])]),t._v(" "),e("p",[t._v("本文结论就是**「不要用 Pipenv」**")]),t._v(" "),e("h2",{attrs:{id:"poetry-安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#poetry-安装"}},[t._v("#")]),t._v(" poetry 安装")]),t._v(" "),e("p",[t._v("MacOS下使用官网推荐方式安装，安装路径是：$HOME/.local/bin")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-sSL")]),t._v(" https://install.python-poetry.org "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" python -\n")])])]),e("h2",{attrs:{id:"初始化-poetry"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化-poetry"}},[t._v("#")]),t._v(" 初始化 Poetry")]),t._v(" "),e("p",[t._v("为了方便解说，我们建立一个全新的demo，名为 "),e("code",[t._v("poetry-demo")]),t._v("。")]),t._v(" "),e("p",[t._v("指令很简单，但还是建议可以一步步跟着操作。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" poetry-demo\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" poetry-demo\n$ poetry init\n")])])]),e("p",[t._v("然后会跳出来一连串的互动对话，用于创建项目的配置文件，这里我就直接全部一路回车，然后看一下生成的 pyproject.toml 配置文件：")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tool.poetry"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v('\nname = "poetry'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('demo"\nversion = "0.1.0"\ndescription = ""\nauthors = '),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"laijihua <oheroj@gmail.com>"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v('\nreadme = "README.md"\n\n'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tool.poetry.dependencies"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v('\npython = "^3.12"\n\n\n'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("build"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("system"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nrequires = "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"poetry-core"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nbuild"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v('backend = "poetry.core.masonry.api"\n')])])]),e("p",[t._v("此时项目的目录接口如下：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("poetry-demo\n└── pyproject.toml\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" directories, "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n")])])]),e("h2",{attrs:{id:"管理虚拟环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#管理虚拟环境"}},[t._v("#")]),t._v(" 管理虚拟环境")]),t._v(" "),e("p",[t._v("poetry 预设了很多自己的虚拟环境配置，这些配置可以通过 poetry config 进行修改。")]),t._v(" "),e("p",[t._v("当用户在执行 poetry add 等指令时，poetry 都会自动检查当下是否正在使用虚拟环境：")]),t._v(" "),e("ul",[e("li",[t._v("如果是，则会直接安装模块到当前的虚拟环境下")]),t._v(" "),e("li",[t._v("如果否，则会自动帮你创建一个新的虚拟环境，然后再安装模块")])]),t._v(" "),e("h2",{attrs:{id:"创建虚拟环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建虚拟环境"}},[t._v("#")]),t._v(" 创建虚拟环境")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ poetry "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("env")]),t._v(" use python3\nCreating virtualenv poetry-demo-CwmQvoVm-py3.12 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" /Users/oheroj/Library/Caches/pypoetry/virtualenvs\nUsing virtualenv: /Users/oheroj/Library/Caches/pypoetry/virtualenvs/poetry-demo-CwmQvoVm-py3.12\n")])])]),e("p",[t._v("可以看出 Poetry 为我们建立了名为 poetry-demo-IEWSZKSE-py3.8的虚拟环境。")]),t._v(" "),e("p",[t._v("重点说明：")]),t._v(" "),e("ul",[e("li",[e("p",[e("code",[t._v("poetry env use python3")]),t._v(" 是使用当前命令行下激活的 python3 解释器创建虚拟环境")])]),t._v(" "),e("li",[e("p",[t._v("poetry 默认会将虚拟环境统一放在指定目录")])])]),t._v(" "),e("p",[t._v("对于 poetry 将虚拟环境统一放在指定路径下，这一点个人更偏向于 venv 的做法，也就是把虚拟环境放在项目目录下，方便用于观看依赖包的源码，在做项目部署的时候更方便一些。")]),t._v(" "),e("p",[t._v("所幸 poetry 提供了这样的选项。")]),t._v(" "),e("h2",{attrs:{id:"在当前项目下创建虚拟环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在当前项目下创建虚拟环境"}},[t._v("#")]),t._v(" 在当前项目下创建虚拟环境")]),t._v(" "),e("p",[t._v("可以使用"),e("code",[t._v("poetry config --list")]),t._v("指令来查看 poetry 的几个主要设定")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("cache-dir "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/Users/oheroj/Library/Caches/pypoetry"')]),t._v("\nexperimental.system-git-client "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\ninstaller.max-workers "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" null\ninstaller.modern-installation "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\ninstaller.no-binary "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" null\ninstaller.parallel "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nkeyring.enabled "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nsolver.lazy-wheel "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nvirtualenvs.create "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nvirtualenvs.in-project "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" null\nvirtualenvs.options.always-copy "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nvirtualenvs.options.no-pip "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nvirtualenvs.options.no-setuptools "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nvirtualenvs.options.system-site-packages "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nvirtualenvs.path "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{cache-dir}/virtualenvs"')]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# /Users/laijihua/Library/Caches/pypoetry/virtualenvs")]),t._v("\nvirtualenvs.prefer-active-python "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nvirtualenvs.prompt "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{project_name}-py{python_version}"')]),t._v("\nwarnings.export "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),e("p",[t._v("其中"),e("code",[t._v("virtualenvs.create = true")]),t._v("若改为 false，则可以停止 poetry 在检查不到虚拟环境是自动创建的行为模式，但是建议不要改动。")]),t._v(" "),e("p",[t._v("而"),e("code",[t._v("virtualenvs.in-project = false")]),t._v("就是我们要修改的目标，使用指令:")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("poetry config virtualenvs.in-project "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),e("p",[t._v("先把之前创建的虚拟环境删除")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ poetry "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("env")]),t._v(" remove python3\nDeleted virtualenv: /Users/oheroj/Library/Caches/pypoetry/virtualenvs/poetry-demo-CwmQvoVm-py3.12\n")])])]),e("p",[t._v("重新创建虚拟环境，看一下差异：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ poetry "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("env")]),t._v(" use python3\nCreating virtualenv poetry-demo "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" /Users/oheroj/Desktop/Dev/python/djangos/poetry-demo/.venv\nUsing virtualenv: /Users/oheroj/Desktop/Dev/python/djangos/poetry-demo/.venv\n")])])]),e("p",[t._v("可以看出：")]),t._v(" "),e("ul",[e("li",[t._v("虚拟环境的路径改为项目的根目录下了")]),t._v(" "),e("li",[t._v("名称固定位"),e("code",[t._v(".venv")])])]),t._v(" "),e("p",[t._v("个人觉得这样的设定更加简洁。")]),t._v(" "),e("h2",{attrs:{id:"启动与退出虚拟环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动与退出虚拟环境"}},[t._v("#")]),t._v(" 启动与退出虚拟环境")]),t._v(" "),e("p",[t._v("在项目的根目录下使用"),e("code",[t._v("poetry shell")]),t._v("就可以进入到虚拟环境")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ poetry shell\nSpawning shell within /Users/oheroj/Desktop/Dev/python/djangos/poetry-demo/.venv\n")])])]),e("p",[e("code",[t._v("poetry shell")]),t._v("指令会检查当前目录或上层目录是否存在"),e("code",[t._v("pyproject.toml")]),t._v("来确定需要启动的虚拟环境，所以如果不移动到项目的目录下，则会出现错误。")]),t._v(" "),e("p",[t._v("退出虚拟环境就更简单了，只要输入"),e("code",[t._v("exit")]),t._v("就可以了。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ exit\n")])])]),e("h2",{attrs:{id:"poetry-指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#poetry-指令"}},[t._v("#")]),t._v(" poetry 指令")]),t._v(" "),e("p",[t._v("poetry 是一个独立的命令行工具，他有自己的指令，需要花费额外的时间与精力学习，相较 pip 更加复杂，这个能是使用 poetry 的一道关卡。好在常用指令其实不超过 10 个，下面就来一一介绍。")]),t._v(" "),e("h3",{attrs:{id:"安装模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装模块"}},[t._v("#")]),t._v(" 安装模块")]),t._v(" "),e("p",[t._v("使用指令:")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ poetry "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v("\npoetry "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" django\nUsing version ^5.0.3 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" django\n\nUpdating dependencies\nResolving dependencies"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(".1s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nPackage operations: "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" installs, "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" updates, "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" removals\n\n  - Installing asgiref "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.7")]),t._v(".2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  - Installing sqlparse "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.4")]),t._v(".4"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  - Installing django "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v(".3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nWriting lock "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v("\n")])])]),e("p",[t._v("可以看到 poetry 会将所有的信息全部列出来，并且清楚的告知了新增了那些第三方模块。")]),t._v(" "),e("p",[t._v("此时项目中的"),e("code",[t._v("pyproject.toml")]),t._v("也发生了变化")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tool.poetry.dependencies"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v('\npython = "^3.12"\ndjango = "^5.0.3" '),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新增部分")]),t._v("\n")])])]),e("p",[t._v('这里要说明，安装 flask ，则 pyproject.toml 只会新增 django = "^5.0.3" 这个字段的第三方模块，其余依赖不会出现在 toml 文件中。')]),t._v(" "),e("p",[t._v("这里是一个非常大的优点，以便区分那些是用户安装的第三方模块，那些是第三方模块一并安装的依赖。")]),t._v(" "),e("h4",{attrs:{id:"poetry-lock-与更新顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#poetry-lock-与更新顺序"}},[t._v("#")]),t._v(" poetry.lock 与更新顺序")]),t._v(" "),e("p",[t._v("除了更新 pyproject.toml ，此时项目中还会新增一个文件，名为 poetry.lock ，它实际上就相当于 pip 的 requirements.txt ，详细记录了所有安装的模块与版本。")]),t._v(" "),e("p",[t._v("当使用 poetry add 指令时，poetry 会自动依序帮你做完这三件事：")]),t._v(" "),e("ol",[e("li",[t._v("更新 pyproject.toml。")]),t._v(" "),e("li",[t._v("依照 pyproject.toml 的内容，更新 poetry.lock 。")]),t._v(" "),e("li",[t._v("依照 poetry.lock 的内容，更新虚拟环境。")])]),t._v(" "),e("p",[t._v("由此可见，poetry.lock 的内容是取决于 pyproject.toml ，但两者并不会自己连动，一定要基于特定指令才会进行同步与更新，"),e("code",[t._v("poetry add")]),t._v("就是一个典型案例。")]),t._v(" "),e("p",[t._v("此时项目目录结构如下：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("poetry-demo\n├── poetry.lock\n└── pyproject.toml\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" directories, "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" files\n")])])]),e("h4",{attrs:{id:"poetry-lock-更新-poetry-lock"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#poetry-lock-更新-poetry-lock"}},[t._v("#")]),t._v(" poetry lock ：更新 poetry.lock")]),t._v(" "),e("p",[t._v("当你自行修改了 pyproject.toml 内容，比如变更特定模块的版本（这是有可能的，尤其在手动处理版本冲突的时候），此时 poetry.lock 的内容与 pyproject.toml 出现了脱钩，必须让它依照新的 pyproject.toml 内容更新、同步，使用指令：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ poetry lock\n")])])]),e("p",[t._v("如此一来，才能确保手动修改的内容，也更新到 poetry.lock 中，毕竟虚拟环境如果要重新建立，是基于 poetry.lock 的内容来安装模块，而非 pyproject.toml。")]),t._v(" "),e("blockquote",[e("p",[t._v("poetry.lock 相当于 Poetry 的 requirements.txt 。")])]),t._v(" "),e("p",[t._v("但要特别注意的是， "),e("code",[t._v("poetry lock")]),t._v(" 指令，仅会更新 poetry.lock ，不会同时安装模块至虚拟环境。")]),t._v(" "),e("p",[t._v("因此，在执行完 poetry lock 指令后，必须再使用"),e("code",[t._v("poetry install")]),t._v(" 来安装模块。否则就会出现 poetry.lock 和虚拟环境不一致的状况。")]),t._v(" "),e("h4",{attrs:{id:"新增模块至-dev-dependencies"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新增模块至-dev-dependencies"}},[t._v("#")]),t._v(" 新增模块至 dev-dependencies")]),t._v(" "),e("p",[t._v("有些模块，比如 pytest 、 black 等等，只会在开发环境中使用，产品的部署环境并不需要。")]),t._v(" "),e("p",[t._v("Poetry 允许你区分这两者，将上述的模块安装至 dev-dependencies 区块，方便让你轻松建立一份「不包含」 dev-dependencies 开发模块的安装清单。")]),t._v(" "),e("p",[t._v("在此以 Black 为例，安装方式如下：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ poetry "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" black "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--group")]),t._v(" dev\n")])])]),e("p",[t._v("结果的区别显示在"),e("code",[t._v("pyproject.toml")]),t._v("里：")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tool.poetry.dependencies"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v('\npython = "^3.12"\ndjango = "^5.0.3"\n\n\n'),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tool.poetry.group.dev.dependencies"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v('\nblack = "^24.3.0"\n')])])]),e("p",[t._v("可以看到 black 被列在不同区块： "),e("code",[t._v("tool.poetry.dev-dependencies")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"poetry-更新模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#poetry-更新模块"}},[t._v("#")]),t._v(" Poetry 更新模块")]),t._v(" "),e("p",[t._v("这个就很简单了，使用 poetry update 指令即可：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("poetry update\n")])])]),e("p",[t._v("上面指令会更新全部可能可以更新的模块，也可以仅指定特定模块，比如：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ poetry update requests toml\n")])])]),e("h3",{attrs:{id:"列出全部模块清单"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#列出全部模块清单"}},[t._v("#")]),t._v(" 列出全部模块清单")]),t._v(" "),e("p",[t._v("类似 pip list ，这里要使用"),e("code",[t._v("poetry show")]),t._v("。")]),t._v(" "),e("p",[t._v("特别提醒的是，这里的清单内容并不是来自于虚拟环境，这点和 pip 不同，而是来自于 poetry.lock 的内容。")]),t._v(" "),e("p",[t._v("你可能会想，来自于 poetry.lock 或虚拟环境，有差吗？两者不是应该要一致？")]),t._v(" "),e("p",[t._v("没错，理论上是，但也有不一致的时候，比如你使用了 pip install 指令安装模块，就不会记载在 poetry.lock 中，那 poetry show 自然也不会显示。")]),t._v(" "),e("p",[t._v("树状显示模块依赖层级")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ poetry show "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--tree")]),t._v("\n")])])]),e("p",[t._v("让主要模块与其依赖模块的关系与层次，一目了然。")]),t._v(" "),e("p",[t._v("而且很贴心的是，它也可以只显示指定模块的依赖层级，以 django 为例：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ poetry show django "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--tree")]),t._v("\n")])])]),e("h3",{attrs:{id:"poetry-移除模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#poetry-移除模块"}},[t._v("#")]),t._v(" Poetry 移除模块")]),t._v(" "),e("p",[t._v("使用 poetry remove 指令。和 poetry add 一样，可以加上 -D 参数来移除置于开发区的模块。")]),t._v(" "),e("p",[t._v("而移除模块时的依赖解析能力，正是 Poetry 远优于 pip 的主要环节，因为 pip 没有。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ poetry remove django\n")])])]),e("h3",{attrs:{id:"输出-poetry-虚拟环境的-requirements-txt"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#输出-poetry-虚拟环境的-requirements-txt"}},[t._v("#")]),t._v(" 输出 Poetry 虚拟环境的 requirements.txt")]),t._v(" "),e("p",[t._v("理论上，全面改用 Poetry 后，项目中是不需要存在 requirements.txt ，因为它的角色已经完全被 poetry.lock 所取代。")]),t._v(" "),e("p",[t._v("但事实是，你可能还是需要它，甚至希望它随着 poetry.lock 的内容更新！至少对我而言就是如此，我在 Docker 部署环境中并不使用 Poetry，所以我需要一份完全等价于 poetry.lock 的 requirements.txt ，用于 Docker 部署。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("poetry "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-f")]),t._v(" requirements.txt "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" requirements.txt --without-hashes\n")])])]),e("h3",{attrs:{id:"修改-poetry-镜像源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改-poetry-镜像源"}},[t._v("#")]),t._v(" 修改 poetry 镜像源")]),t._v(" "),e("p",[t._v("修改为清华镜像源")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ poetry "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" tsinghua https://pypi.tuna.tsinghua.edu.cn/simple\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);