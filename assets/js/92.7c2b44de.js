(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{554:function(e,a,t){"use strict";t.r(a);var n=t(2),s=Object(n.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),a("p",[e._v("展示一个非常基本的 hello world 示例。")]),e._v(" "),a("p",[e._v("文件如下：")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n├── CMakeLists.txt\n├── main.cpp\n")])])]),a("ul",[a("li",[e._v("CMakeLists.txt - 包含您希望运行的 CMake 命令")]),e._v(" "),a("li",[e._v("main.cpp - 一个简单的“Hello World”cpp 文件。")])]),e._v(" "),a("h2",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[e._v("#")]),e._v(" 概念")]),e._v(" "),a("h2",{attrs:{id:"cmakelists-txt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmakelists-txt"}},[e._v("#")]),e._v(" CMakeLists.txt")]),e._v(" "),a("p",[e._v("CMakeLists.txt 存储所有"),a("code",[e._v("CMake")]),e._v("命令的文件。当"),a("code",[e._v("cmake")]),e._v("在文件夹中运行时，它将查找此文件，如果它不存在，则"),a("code",[e._v("cmake")]),e._v("将退出并显示错误。")]),e._v(" "),a("h2",{attrs:{id:"指定最低-cmake-版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指定最低-cmake-版本"}},[e._v("#")]),e._v(" 指定最低 CMake 版本")]),e._v(" "),a("p",[e._v("使用 CMake 创建项目时，您可以指定支持的最低 CMake 版本。")]),e._v(" "),a("div",{staticClass:"language-cmake extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cmake"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("cmake_minimum_required")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token property"}},[e._v("VERSION")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),a("h2",{attrs:{id:"projects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#projects"}},[e._v("#")]),e._v(" Projects")]),e._v(" "),a("p",[e._v("CMake 构建可以包含项目名称，以便在使用多个项目时更轻松地引用某些变量。")]),e._v(" "),a("div",{staticClass:"language-cmake extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cmake"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("project")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("hello_cmake"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),a("h2",{attrs:{id:"创建可执行文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建可执行文件"}},[e._v("#")]),e._v(" 创建可执行文件")]),e._v(" "),a("p",[e._v("add_executable() 命令指定应从指定的源文件构建可执行文件，在此示例中为 main.cpp。")]),e._v(" "),a("p",[e._v("add_executable() 函数的第一个参数是要构建的可执行文件的名称，第二个参数是要编译的源文件列表。")]),e._v(" "),a("div",{staticClass:"language-cmake extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cmake"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("add_executable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("hello_cmake main.cpp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),a("p",[a("strong",[e._v("提示")])]),e._v(" "),a("p",[e._v("有些人使用的一种简写方式是让项目名称和可执行文件名称相同。这允许您按如下方式指定 CMakeLists.txt，")]),e._v(" "),a("div",{staticClass:"language-cmake extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cmake"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("cmake_minimum_required")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token property"}},[e._v("VERSION")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("project")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("hello_cmake"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("add_executable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("${")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("PROJECT_NAME")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" main.cpp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),a("p",[e._v("在本例中，"),a("code",[e._v("project()")]),e._v(" 函数将创建一个值为 "),a("code",[e._v("hello_cmake")]),e._v(" 的变量 "),a("code",[e._v("${PROJECT_NAME}")]),e._v("。然后可以将其传递给 "),a("code",[e._v("add_executable()")]),e._v(" 函数以输出“hello_cmake”可执行文件。")]),e._v(" "),a("h2",{attrs:{id:"二进制目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二进制目录"}},[e._v("#")]),e._v(" 二进制目录")]),e._v(" "),a("p",[e._v("运行"),a("code",[e._v("cmake")]),e._v("命令的根或顶级文件夹称为"),a("code",[e._v("CMAKE_BINARY_DIR")]),e._v("，是所有二进制文件的根文件夹。 CMake 支持就地(in-place)和源外(out-of-source)构建和生成二进制文件。")]),e._v(" "),a("h3",{attrs:{id:"就地编译-in-place-build"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#就地编译-in-place-build"}},[e._v("#")]),e._v(" 就地编译(In-Place Build)")]),e._v(" "),a("p",[e._v("就地构建在与源代码相同的目录结构中生成所有临时构建文件。这意味着所有 Makefile 和目标文件都散布在您的正常代码目录下。要创建就地构建目标，请在根目录中运行 cmake 命令。例如：")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("A-hello-cmake$ cmake "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n-- The C compiler identification is GNU "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("4.8")]),e._v(".4\n-- The CXX compiler identification is GNU "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("4.8")]),e._v(".4\n-- Check "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" working C compiler: /usr/bin/cc\n-- Check "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n-- Check "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" working CXX compiler: /usr/bin/c++\n-- Check "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n-- Configuring "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n-- Generating "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n-- Build files have been written to: /home/matrim/workspace/cmake-examples/01-basic/A-hello-cmake\n\nA-hello-cmake$ tree\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n├── CMakeCache.txt\n├── CMakeFiles\n│   ├── "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.8")]),e._v(".12.2\n│   │   ├── CMakeCCompiler.cmake\n│   │   ├── CMakeCXXCompiler.cmake\n│   │   ├── CMakeDetermineCompilerABI_C.bin\n│   │   ├── CMakeDetermineCompilerABI_CXX.bin\n│   │   ├── CMakeSystem.cmake\n│   │   ├── CompilerIdC\n│   │   │   ├── a.out\n│   │   │   └── CMakeCCompilerId.c\n│   │   └── CompilerIdCXX\n│   │       ├── a.out\n│   │       └── CMakeCXXCompilerId.cpp\n│   ├── cmake.check_cache\n│   ├── CMakeDirectoryInformation.cmake\n│   ├── CMakeOutput.log\n│   ├── CMakeTmp\n│   ├── hello_cmake.dir\n│   │   ├── build.make\n│   │   ├── cmake_clean.cmake\n│   │   ├── DependInfo.cmake\n│   │   ├── depend.make\n│   │   ├── flags.make\n│   │   ├── link.txt\n│   │   └── progress.make\n│   ├── Makefile2\n│   ├── Makefile.cmake\n│   ├── progress.marks\n│   └── TargetDirectories.txt\n├── cmake_install.cmake\n├── CMakeLists.txt\n├── main.cpp\n├── Makefile\n")])])]),a("h3",{attrs:{id:"源外编译-out-of-source-build"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源外编译-out-of-source-build"}},[e._v("#")]),e._v(" 源外编译(Out-of-Source Build)")]),e._v(" "),a("p",[e._v("外源构建允许您创建单个构建文件夹，该文件夹可以位于文件系统的任何位置。 所有临时构建和目标文件都位于此目录中，以保持源代码树干净。 要创建源外构建，请在构建文件夹中运行 cmake 命令，并将其指向包含根 CMakeLists.txt 文件的目录。 如果您想从头开始重新创建 cmake 环境，则使用外源构建，您只需删除构建目录，然后重新运行 cmake。")]),e._v(" "),a("p",[e._v("例如：")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("A-hello-cmake$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" build\n\nA-hello-cmake$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" build/\n\nmatrim@freyr:~/workspace/cmake-examples/01-basic/A-hello-cmake/build$ cmake "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("\n-- The C compiler identification is GNU "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("4.8")]),e._v(".4\n-- The CXX compiler identification is GNU "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("4.8")]),e._v(".4\n-- Check "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" working C compiler: /usr/bin/cc\n-- Check "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n-- Check "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" working CXX compiler: /usr/bin/c++\n-- Check "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n-- Configuring "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n-- Generating "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n-- Build files have been written to: /home/matrim/workspace/cmake-examples/01-basic/A-hello-cmake/build\n\nA-hello-cmake/build$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("\n\nA-hello-cmake$ tree\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n├── build\n│   ├── CMakeCache.txt\n│   ├── CMakeFiles\n│   │   ├── "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.8")]),e._v(".12.2\n│   │   │   ├── CMakeCCompiler.cmake\n│   │   │   ├── CMakeCXXCompiler.cmake\n│   │   │   ├── CMakeDetermineCompilerABI_C.bin\n│   │   │   ├── CMakeDetermineCompilerABI_CXX.bin\n│   │   │   ├── CMakeSystem.cmake\n│   │   │   ├── CompilerIdC\n│   │   │   │   ├── a.out\n│   │   │   │   └── CMakeCCompilerId.c\n│   │   │   └── CompilerIdCXX\n│   │   │       ├── a.out\n│   │   │       └── CMakeCXXCompilerId.cpp\n│   │   ├── cmake.check_cache\n│   │   ├── CMakeDirectoryInformation.cmake\n│   │   ├── CMakeOutput.log\n│   │   ├── CMakeTmp\n│   │   ├── hello_cmake.dir\n│   │   │   ├── build.make\n│   │   │   ├── cmake_clean.cmake\n│   │   │   ├── DependInfo.cmake\n│   │   │   ├── depend.make\n│   │   │   ├── flags.make\n│   │   │   ├── link.txt\n│   │   │   └── progress.make\n│   │   ├── Makefile2\n│   │   ├── Makefile.cmake\n│   │   ├── progress.marks\n│   │   └── TargetDirectories.txt\n│   ├── cmake_install.cmake\n│   └── Makefile\n├── CMakeLists.txt\n├── main.cpp\n")])])]),a("h2",{attrs:{id:"构建示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建示例"}},[e._v("#")]),e._v(" 构建示例")]),e._v(" "),a("blockquote",[a("p",[e._v("代码："),a("a",{attrs:{href:"https://github.com/ttroy50/cmake-examples/tree/master/01-basic/A-hello-cmake",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("01-basic/A-hello-cmake"),a("OutboundLink")],1)])]),e._v(" "),a("p",[e._v("以下是构建此示例的示例输出。")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" build\n\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" build\n\n$ cmake "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("\n-- The C compiler identification is GNU "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("4.8")]),e._v(".4\n-- The CXX compiler identification is GNU "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("4.8")]),e._v(".4\n-- Check "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" working C compiler: /usr/bin/cc\n-- Check "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n-- Check "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" working CXX compiler: /usr/bin/c++\n-- Check "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n-- Configuring "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n-- Generating "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n-- Build files have been written to: /workspace/cmake-examples/01-basic/hello_cmake/build\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v("\nScanning dependencies of target hello_cmake\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("100")]),e._v("%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Building CXX object CMakeFiles/hello_cmake.dir/hello_cmake.cpp.o\nLinking CXX executable hello_cmake\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("100")]),e._v("%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" Built target hello_cmake\n\n$ ./hello_cmake\nHello CMake"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);